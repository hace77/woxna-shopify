{{ 'video-section.css' | asset_url | stylesheet_tag }}
{{ 'component-deferred-media.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

{%- liquid
  assign video_id = section.settings.video.id | default: section.settings.video_url.id
  assign video_alt = section.settings.video.alt | default: section.settings.description
  assign alt = 'sections.video.load_video' | t: description: video_alt | escape
  assign poster = section.settings.video.preview_image | default: section.settings.cover_image

  if section.settings.video != null
    assign ratio_diff = section.settings.video.aspect_ratio | minus: poster.aspect_ratio | abs
    if ratio_diff < 0.01 and ratio_diff > 0
      assign fix_ratio = true
    endif
  endif
-%}

{%- capture sizes -%}
  {% if section.settings.full_width -%}
    100vw
  {%- else -%}
    (min-width: {{ settings.page_width }}px) {{ settings.page_width | minus: 100 }}px, (min-width: 750px)
    calc(100vw - 10rem), 100vw
  {%- endif %}
{%- endcapture -%}

<div class="color-{{ section.settings.color_scheme }} gradient">
  <div class="video-section isolate{% unless section.settings.full_width %} page-width{% endunless %} section-{{ section.id }}-padding">
    <div
      {% if section.settings.full_width %}
        class="page-width"
      {% endif %}
    >
      {%- unless section.settings.heading == blank -%}
        <div class="title-wrapper title-wrapper--no-top-margin{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}">
          <h2 class="title inline-richtext {{ section.settings.heading_size }}">{{ section.settings.heading }}</h2>
        </div>
      {%- endunless -%}
    </div>
    <div class="holder">
      {{
        section.settings.video
        | video_tag:
          autoplay: false,
          loop: true,
          controls: false,
          muted: true,
          playsinline: true,
          style: 'width: 100%; height: 100%; object-fit: cover;'
      }}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const section = document.querySelector('#shopify-section-{{ section.id }}');
    if (!section) return;

    const vid = section.querySelector('video');
    if (!vid) return;

    // Set initial state
    vid.currentTime = 0;
    vid.loop = false;
    vid.muted = true;
    vid.playsInline = true;

    let ticking = false;
    let lastPercentage = 0;
    let hasReachedTrigger = false;

    const getScrollPercentage = () => {
      const rect = section.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      
      // Calculate visibility percentage
      const visibleHeight = Math.min(windowHeight, rect.bottom) - Math.max(0, rect.top);
      const visibilityPercentage = visibleHeight / rect.height;
      
      console.log('Visibility:', {
        percentage: visibilityPercentage,
        visibleHeight: visibleHeight,
        sectionHeight: rect.height
      });

      // If section is completely out of view, reset
      if (rect.bottom < -rect.height || rect.top > windowHeight) {
        if (hasReachedTrigger) {
          console.log('Section out of view, resetting');
          hasReachedTrigger = false;
          vid.currentTime = 0;
        }
        return 0;
      }

      // Check if we've reached the trigger point (50% visible)
      if (!hasReachedTrigger && visibilityPercentage >= 0.5) {
        console.log('Trigger point reached!', {
          visibilityPercentage: visibilityPercentage
        });
        hasReachedTrigger = true;
      }

      // Calculate scroll percentage
      const startPoint = windowHeight * 0.5; // When section is 50% in view
      const endPoint = 0; // When section is about to leave viewport
      const currentPosition = rect.top;
      
      // Calculate how far we've scrolled through the section
      let percentage = (startPoint - currentPosition) / (startPoint - endPoint);
      
      // If we've scrolled past the end point, set to 100%
      if (rect.bottom <= 0) {
        percentage = 1;
      }
      
      percentage = Math.max(0, Math.min(percentage, 1));
      
      console.log('Scroll calculation:', {
        currentPosition: currentPosition,
        startPoint: startPoint,
        endPoint: endPoint,
        percentage: percentage
      });

      return percentage;
    };

    const scroll = () => {
      if (!vid.duration) return;

      const percentage = getScrollPercentage();
      
      if (Math.abs(percentage - lastPercentage) > 0.01) {
        if (!ticking) {
          requestAnimationFrame(() => {
            if (hasReachedTrigger) {
              const newTime = vid.duration * percentage;
              console.log('Updating video time:', {
                newTime: newTime,
                duration: vid.duration,
                percentage: percentage
              });
              vid.currentTime = newTime;
            }
            lastPercentage = percentage;
            ticking = false;
          });
          ticking = true;
        }
      }
    };

    let lastTime = 0;
    const throttle = 16;

    window.addEventListener('scroll', () => {
      const now = Date.now();
      if (now - lastTime >= throttle) {
        lastTime = now;
        scroll();
      }
    });

    // Initial scroll check
    scroll();
  });
</script>

{% schema %}
{
  "name": "Video scroll",
  "tag": "section",
  "class": "section",
  "disabled_on": {
    "groups": ["header", "footer"]
  },
  "settings": [
    {
      "type": "inline_richtext",
      "id": "heading",
      "default": "t:sections.video.settings.heading.default",
      "label": "t:sections.video.settings.heading.label"
    },
    {
      "type": "select",
      "id": "heading_size",
      "options": [
        {
          "value": "h2",
          "label": "t:sections.all.heading_size.options__1.label"
        },
        {
          "value": "h1",
          "label": "t:sections.all.heading_size.options__2.label"
        },
        {
          "value": "h0",
          "label": "t:sections.all.heading_size.options__3.label"
        },
        {
          "value": "hxl",
          "label": "t:sections.all.heading_size.options__4.label"
        },
        {
          "value": "hxxl",
          "label": "t:sections.all.heading_size.options__5.label"
        }
      ],
      "default": "h1",
      "label": "t:sections.all.heading_size.label"
    },
    {
      "type": "checkbox",
      "id": "enable_video_looping",
      "label": "t:sections.video.settings.enable_video_looping.label",
      "default": false
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__1.content"
    },
    {
      "type": "video",
      "id": "video",
      "label": "t:sections.video.settings.video.label"
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__2.content"
    },
    {
      "type": "paragraph",
      "content": "t:sections.video.settings.paragraph.content"
    },
    {
      "type": "video_url",
      "id": "video_url",
      "accept": ["youtube", "vimeo"],
      "default": "https://www.youtube.com/watch?v=_9VUPq3SxOc",
      "label": "t:sections.video.settings.video_url.label",
      "info": "t:sections.video.settings.video_url.info"
    },
    {
      "type": "image_picker",
      "id": "cover_image",
      "label": "t:sections.video.settings.cover_image.label"
    },
    {
      "type": "text",
      "id": "description",
      "label": "t:sections.video.settings.description.label",
      "info": "t:sections.video.settings.description.info"
    },
    {
      "type": "header",
      "content": "t:sections.video.settings.header__3.content"
    },
    {
      "type": "checkbox",
      "id": "full_width",
      "label": "t:sections.video.settings.full_width.label",
      "default": false
    },
    {
      "type": "color_scheme",
      "id": "color_scheme",
      "label": "t:sections.all.colors.label",
      "default": "scheme-1"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ],
  "presets": [
    {
      "name": "t:sections.video.presets.name"
    }
  ]
}
{% endschema %}
